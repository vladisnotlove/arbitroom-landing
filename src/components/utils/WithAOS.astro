---
import { parse, HTMLElement } from "node-html-parser";
import "aos/dist/aos.css";

type AOSProps = {
    animation:
        | "fade"
        | "fade-up"
        | "fade-down"
        | "fade-left"
        | "fade-right"
        | "fade-up-right"
        | "fade-up-left"
        | "fade-down-right"
        | "fade-down-left"
        | "flip-up"
        | "flip-down"
        | "flip-left"
        | "flip-right"
        | "slide-up"
        | "slide-down"
        | "slide-left"
        | "slide-right"
        | "zoom-in"
        | "zoom-in-up"
        | "zoom-in-down"
        | "zoom-in-left"
        | "zoom-in-right"
        | "zoom-out"
        | "zoom-out-up"
        | "zoom-out-down"
        | "zoom-out-left"
        | "zoom-out-right";
    offset?: number;
    duration?: number;
    easing?:
        | "linear"
        | "ease"
        | "ease-in"
        | "ease-out"
        | "ease-in-out"
        | "ease-in-back"
        | "ease-out-back"
        | "ease-in-out-back"
        | "ease-in-sine"
        | "ease-out-sine"
        | "ease-in-out-sine"
        | "ease-in-quad"
        | "ease-out-quad"
        | "ease-in-out-quad"
        | "ease-in-cubic"
        | "ease-out-cubic"
        | "ease-in-out-cubic"
        | "ease-in-quart"
        | "ease-out-quart"
        | "ease-in-out-quart";
    delay?: number;
    anchor?: string;
    anchorPlacement?:
        | "top-bottom"
        | "top-center"
        | "top-top"
        | "center-bottom"
        | "center-center"
        | "center-top"
        | "bottom-bottom"
        | "bottom-center"
        | "bottom-top";
    once?: boolean;
};

interface Props extends AOSProps {
    adaptive?: {
        maxWidth?: number;
        attrs: AOSProps;
    }[];
}

const {
    animation,
    offset,
    duration,
    easing,
    delay,
    anchor,
    anchorPlacement,
    once = true,
    adaptive,
} = Astro.props;

const html = await Astro.slots.render("default");
const dom = parse(html);

dom.childNodes.forEach((node) => {
    // ELEMENT
    if (node instanceof HTMLElement) {
        node.setAttribute("data-aos", animation);
        if (adaptive) {
            const defaultAttrs = {
                animation,
                offset,
                duration,
                easing,
                delay,
                anchor,
                anchorPlacement,
                once,
            };
            const _adaptive: typeof adaptive = [
                ...adaptive,
                { attrs: defaultAttrs },
            ];

            node.setAttribute("data-aos-adaptive", JSON.stringify(_adaptive));
        }
        if (offset) node.setAttribute("data-aos-offset", "" + offset);
        if (duration) node.setAttribute("data-aos-duration", "" + duration);
        if (easing) node.setAttribute("data-aos-easing", easing);
        if (delay) node.setAttribute("data-aos-delay", "" + delay);
        if (anchor) node.setAttribute("data-aos-anchor", "" + anchor);
        if (anchorPlacement)
            node.setAttribute("data-aos-anchorPlacement", "" + anchorPlacement);
        if (once) node.setAttribute("data-aos-once", "" + once);
    }
});
---

<Fragment set:html={dom.toString()} />

<script>
    import { debounce } from "throttle-debounce";
    import AOS from "aos";

    const updateAttrs = () => {
        try {
            let attrsChanged = false;
            document
                .querySelectorAll("[data-aos-adaptive]")
                .forEach((element) => {
                    const str = element.getAttribute("data-aos-adaptive");
                    const adaptive = str ? JSON.parse(str) : null;
                    let finalAttrs: any;

                    if (adaptive && Array.isArray(adaptive)) {
                        adaptive.forEach(({ maxWidth, attrs }) => {
                            if (maxWidth !== undefined) {
                                if (window.innerWidth < maxWidth) {
                                    finalAttrs = attrs;
                                }
                            } else {
                                if (finalAttrs === undefined) {
                                    finalAttrs = attrs;
                                }
                            }
                        });
                    }

                    if (finalAttrs !== undefined) {
                        Object.entries(finalAttrs).forEach(([key, value]) => {
                            if (key === "animation") {
                                element.setAttribute("data-aos", String(value));
                            } else {
                                element.setAttribute(
                                    `data-aos-${key}`,
                                    String(value)
                                );
                            }
                        });
                        attrsChanged = true;
                    }
                });

            if (attrsChanged) {
                AOS.refresh();
            }
        } catch (e) {
            console.error(e);
        }
    };

    window.addEventListener("load", () => {
        updateAttrs();

        // wait for loader appear
        setTimeout(() => {
            AOS.init({
                duration: 800,
            });
        }, 300);
    });

    window.addEventListener("resize", debounce(200, updateAttrs));
</script>
