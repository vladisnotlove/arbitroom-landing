---
import classNames from "classNames";

export interface Props {
    className?: string;
    // only global classes can be received
    classes?: {
        line?: string;
    };
    lineOptions?: {
        radius?: number;
    };
}

const { className, classes = {}, lineOptions = {} } = Astro.props;
---

<div
    class={classNames(className, "connector")}
    data-radius={lineOptions.radius}
    data-line-class={classes.line}
>
    <slot />
</div>

<style lang="scss" is:global>
    .line {
        opacity: 0;
        transition: opacity 0.6s;

        &.show {
            opacity: 1;
        }
    }
</style>

<script>
    import addOnResize from "@utils/addOnResize";
    import drawLine from "@utils/drawLine";

    window.addEventListener("load", () => {
        const connectors = document.querySelectorAll(".connector");

        connectors.forEach((connector) => {
            const radius = parseFloat(
                connector.getAttribute("data-radius") || ""
            );
            const className = connector.getAttribute("data-line-class");
            const children = Array.from(connector.children);

            let lines: (Element | null)[] = new Array(children.length - 1).fill(
                null
            );
            let observer = new IntersectionObserver(
                (entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add("show");
                        }
                    });
                },
                {
                    root: null,
                    rootMargin: "0px 100px 0px 100px",
                    threshold: [1],
                }
            );

            const clearLines = () => {
                // clear lines
                if (lines.length > 0) {
                    for (let i = 0; i < lines.length; i++) {
                        lines[i]?.remove();
                        lines[i] = null;
                    }
                    observer.disconnect();
                }
            };

            const drawLines = () => {
                for (let i = 1; i < children.length; i++) {
                    const prev = children[i - 1];
                    const cur = children[i];

                    if (
                        getComputedStyle(cur).opacity === "1" &&
                        getComputedStyle(prev).opacity === "1" &&
                        lines[i - 1] === null
                    ) {
                        const line = drawLine(prev, cur, { radius: radius });

                        if (line) {
                            line.classList.add("line");
                            if (className) line.classList.add(className);
                            lines[i - 1] = line;
                            observer.observe(line);
                        }
                    }
                }
            };

            const redrawLines = () => {
                clearLines();
                drawLines();
            };

            // wait for page loader
            setTimeout(() => {
                addOnResize(connector, redrawLines, { throttle: 150 });

                setInterval(() => {
                    if (lines.findIndex((line) => line === null) !== -1) {
                        drawLines();
                    }
                }, 200);

                let timeouts: number[] = [];

                children.forEach((child, index) => {
                    child.addEventListener("mouseenter", () => {
                        timeouts.forEach((timeout) => {
                            clearTimeout(timeout);
                        });
                        timeouts = [];

                        lines.forEach((line, lineIndex) => {
                            if (line === null) return;
                            if (lineIndex >= index) {
                                line.classList.remove("active");
                            } else {
                                line.classList.add("active");
                            }
                        });
                    });

                    child.addEventListener("mouseleave", () => {
                        const timeout = setTimeout(() => {
                            lines.forEach((line) => {
                                if (line === null) return;
                                line.classList.remove("active");
                            });
                        }, 400);
                        timeouts.push(timeout);
                    });
                });
            }, 400);
        });
    });
</script>
